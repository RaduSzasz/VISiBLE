import org.gradle.api.tasks.Exec

buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
	}
	repositories {
		maven {
      url "https://plugins.gradle.org/m2/"
    }
	}
	dependencies {
	 	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath "gradle.plugin.com.dimafeng:containerized-tasks:0.5.1"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: "com.dimafeng.containerizedTask"

jar {
	baseName = 'visible-server'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

npmContainerizedTask {
    sourcesDir = 'static/'
    //imageName = 'monostream/nodejs-gulp-bower';
    scriptBody = 'npm install'
    //outputLevel = 'INFO' // 'ALL', 'DEBUG'
}

task runFrontend << {
	println "Starting subtask 1"
	println "npm install".execute(null, new File("./static/")).text
	println "Starting subtask 2"
	println "npm run tsc".execute(null, new File("./static/")).text
}

// Get the path for the locally installed binaries
task npmBin << {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'npm'
            args = ['bin']
            standardOutput = os
        }
        ext.binPath = os.toString().trim() + "/"
    }
}

bootRun.dependsOn runFrontend

// Install packages from package.json
task npm(type: Exec) {
    description = "Grab NodeJS dependencies (from package.json)"
    commandLine = ["npm", "install"]
    inputs.file "package.json"
    outputs.dir "node_modules"

    tasks.npmBin.execute()
}
